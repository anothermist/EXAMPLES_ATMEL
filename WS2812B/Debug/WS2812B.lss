
WS2812B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  00800100  00800100  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ea1  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087c  00000000  00000000  00001231  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000688  00000000  00000000  00001aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00002138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045b  00000000  00000000  000021d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009f7  00000000  00000000  0000262b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00003022  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 37       	cpi	r26, 0x78	; 120
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

	uint8_t pos=0;
	uint8_t direction=1;
	uint8_t i;
	
	for (int i=0; i<40; i++) {
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0c c0       	rjmp	.+24     	; 0xae <main+0x1e>
		led[i].r=1; led[i].g=1; led[i].b=1;
  96:	fc 01       	movw	r30, r24
  98:	ee 0f       	add	r30, r30
  9a:	ff 1f       	adc	r31, r31
  9c:	e8 0f       	add	r30, r24
  9e:	f9 1f       	adc	r31, r25
  a0:	e0 50       	subi	r30, 0x00	; 0
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	21 83       	std	Z+1, r18	; 0x01
  a8:	20 83       	st	Z, r18
  aa:	22 83       	std	Z+2, r18	; 0x02

	uint8_t pos=0;
	uint8_t direction=1;
	uint8_t i;
	
	for (int i=0; i<40; i++) {
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	88 32       	cpi	r24, 0x28	; 40
  b0:	91 05       	cpc	r25, r1
  b2:	8c f3       	brlt	.-30     	; 0x96 <main+0x6>
		led[i].r=1; led[i].g=1; led[i].b=1;
	}
	ws2812_setleds(led, 40);
  b4:	68 e2       	ldi	r22, 0x28	; 40
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	0e 94 ef 00 	call	0x1de	; 0x1de <ws2812_setleds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	89 e6       	ldi	r24, 0x69	; 105
  c4:	98 e1       	ldi	r25, 0x18	; 24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x36>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x40>
  d0:	00 00       	nop
	_delay_ms(500);
	
	led[0].r=0; led[0].g=0; led[0].b=0;
  d2:	e0 e0       	ldi	r30, 0x00	; 0
  d4:	f1 e0       	ldi	r31, 0x01	; 1
  d6:	11 82       	std	Z+1, r1	; 0x01
  d8:	10 82       	st	Z, r1
  da:	12 82       	std	Z+2, r1	; 0x02
	led[1].r=1; led[1].g=0; led[1].b=0;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	84 83       	std	Z+4, r24	; 0x04
  e0:	13 82       	std	Z+3, r1	; 0x03
  e2:	15 82       	std	Z+5, r1	; 0x05
	led[2].r=0; led[2].g=1; led[2].b=0;
  e4:	17 82       	std	Z+7, r1	; 0x07
  e6:	86 83       	std	Z+6, r24	; 0x06
  e8:	10 86       	std	Z+8, r1	; 0x08
	led[3].r=0; led[3].g=0; led[3].b=1;
  ea:	12 86       	std	Z+10, r1	; 0x0a
  ec:	11 86       	std	Z+9, r1	; 0x09
  ee:	83 87       	std	Z+11, r24	; 0x0b
	
	
	for (i=0; i<40; i++) ws2812_send((uint8_t *)&led[0]);
  f0:	c0 e0       	ldi	r28, 0x00	; 0
  f2:	05 c0       	rjmp	.+10     	; 0xfe <main+0x6e>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 c7 00 	call	0x18e	; 0x18e <ws2812_send>
  fc:	cf 5f       	subi	r28, 0xFF	; 255
  fe:	c8 32       	cpi	r28, 0x28	; 40
 100:	c8 f3       	brcs	.-14     	; 0xf4 <main+0x64>
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	89 e6       	ldi	r24, 0x69	; 105
 106:	98 e1       	ldi	r25, 0x18	; 24
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x78>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x82>
 112:	00 00       	nop
	_delay_ms(500);
	for (i=0; i<40; i++) ws2812_send((uint8_t *)&led[2]);
 114:	c0 e0       	ldi	r28, 0x00	; 0
 116:	05 c0       	rjmp	.+10     	; 0x122 <main+0x92>
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 c7 00 	call	0x18e	; 0x18e <ws2812_send>
 120:	cf 5f       	subi	r28, 0xFF	; 255
 122:	c8 32       	cpi	r28, 0x28	; 40
 124:	c8 f3       	brcs	.-14     	; 0x118 <main+0x88>
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	89 e6       	ldi	r24, 0x69	; 105
 12a:	98 e1       	ldi	r25, 0x18	; 24
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x9c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xa6>
 136:	00 00       	nop
struct cRGB led[40];

int main(void) {

	uint8_t pos=0;
	uint8_t direction=1;
 138:	11 e0       	ldi	r17, 0x01	; 1

struct cRGB led[40];

int main(void) {

	uint8_t pos=0;
 13a:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(500);
	
	
	while(1) {

		for (i=0; i<pos; i++)
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	05 c0       	rjmp	.+10     	; 0x14a <main+0xba>
		ws2812_send((uint8_t *)&led[1]);
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 c7 00 	call	0x18e	; 0x18e <ws2812_send>
	_delay_ms(500);
	
	
	while(1) {

		for (i=0; i<pos; i++)
 148:	cf 5f       	subi	r28, 0xFF	; 255
 14a:	cd 17       	cp	r28, r29
 14c:	c8 f3       	brcs	.-14     	; 0x140 <main+0xb0>
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	89 e6       	ldi	r24, 0x69	; 105
 152:	98 e1       	ldi	r25, 0x18	; 24
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0xc4>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0xce>
 15e:	00 00       	nop
		ws2812_send((uint8_t *)&led[1]);
		
		_delay_ms(500);
		
		for (i=0; i<(40-pos); i++)
 160:	c0 e0       	ldi	r28, 0x00	; 0
 162:	05 c0       	rjmp	.+10     	; 0x16e <main+0xde>
		ws2812_send((uint8_t *)&led[3]);
 164:	89 e0       	ldi	r24, 0x09	; 9
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 c7 00 	call	0x18e	; 0x18e <ws2812_send>
		for (i=0; i<pos; i++)
		ws2812_send((uint8_t *)&led[1]);
		
		_delay_ms(500);
		
		for (i=0; i<(40-pos); i++)
 16c:	cf 5f       	subi	r28, 0xFF	; 255
 16e:	2c 2f       	mov	r18, r28
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	88 e2       	ldi	r24, 0x28	; 40
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	8d 1b       	sub	r24, r29
 178:	91 09       	sbc	r25, r1
 17a:	28 17       	cp	r18, r24
 17c:	39 07       	cpc	r19, r25
 17e:	94 f3       	brlt	.-28     	; 0x164 <main+0xd4>
		ws2812_send((uint8_t *)&led[3]);
		
		pos+=direction;
 180:	d1 0f       	add	r29, r17
		if ((pos==40)||(pos==0)) direction=-direction;
 182:	d8 32       	cpi	r29, 0x28	; 40
 184:	11 f0       	breq	.+4      	; 0x18a <main+0xfa>
 186:	d1 11       	cpse	r29, r1
 188:	d9 cf       	rjmp	.-78     	; 0x13c <main+0xac>
 18a:	11 95       	neg	r17
 18c:	d7 cf       	rjmp	.-82     	; 0x13c <main+0xac>

0000018e <ws2812_send>:
#include "ws2812.h"
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

void inline ws2812_send(uint8_t *data) {
 18e:	fc 01       	movw	r30, r24

void inline ws2812_sendarray_mask(uint8_t *data, uint16_t datlen, uint8_t maskhi) {
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  WS2812_DDRREG |= maskhi;
 190:	87 b1       	in	r24, 0x07	; 7
 192:	81 60       	ori	r24, 0x01	; 1
 194:	87 b9       	out	0x07, r24	; 7
  
  masklo	=~maskhi&WS2812_PORTREG;
 196:	78 b1       	in	r23, 0x08	; 8
 198:	7e 7f       	andi	r23, 0xFE	; 254
  maskhi |=        WS2812_PORTREG;
 19a:	68 b1       	in	r22, 0x08	; 8
 19c:	61 60       	ori	r22, 0x01	; 1
  
  sreg_prev=SREG;
 19e:	af b7       	in	r26, 0x3f	; 63
#ifdef INTERRUPT_DISABLE
  cli();  
 1a0:	f8 94       	cli
 1a2:	23 e0       	ldi	r18, 0x03	; 3
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	15 c0       	rjmp	.+42     	; 0x1d2 <loop39+0x20>
#endif  

  while (datlen--) {
    curbyte=*data++;
 1a8:	af 01       	movw	r20, r30
 1aa:	4f 5f       	subi	r20, 0xFF	; 255
 1ac:	5f 4f       	sbci	r21, 0xFF	; 255
 1ae:	20 81       	ld	r18, Z
    
    asm volatile(
 1b0:	38 e0       	ldi	r19, 0x08	; 8

000001b2 <loop39>:
 1b2:	68 b9       	out	0x08, r22	; 8
 1b4:	00 00       	nop
 1b6:	07 f4       	brid	.+0      	; 0x1b8 <loop39+0x6>
 1b8:	27 ff       	sbrs	r18, 7
 1ba:	78 b9       	out	0x08, r23	; 8
 1bc:	22 0f       	add	r18, r18
 1be:	00 00       	nop
 1c0:	07 f4       	brid	.+0      	; 0x1c2 <loop39+0x10>
 1c2:	07 f4       	brid	.+0      	; 0x1c4 <loop39+0x12>
 1c4:	07 f4       	brid	.+0      	; 0x1c6 <loop39+0x14>
 1c6:	78 b9       	out	0x08, r23	; 8
 1c8:	07 f4       	brid	.+0      	; 0x1ca <loop39+0x18>
 1ca:	3a 95       	dec	r19
 1cc:	91 f7       	brne	.-28     	; 0x1b2 <loop39>
  sreg_prev=SREG;
#ifdef INTERRUPT_DISABLE
  cli();  
#endif  

  while (datlen--) {
 1ce:	9c 01       	movw	r18, r24
    curbyte=*data++;
 1d0:	fa 01       	movw	r30, r20
  sreg_prev=SREG;
#ifdef INTERRUPT_DISABLE
  cli();  
#endif  

  while (datlen--) {
 1d2:	c9 01       	movw	r24, r18
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	23 2b       	or	r18, r19
 1d8:	39 f7       	brne	.-50     	; 0x1a8 <ws2812_send+0x1a>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(WS2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 1da:	af bf       	out	0x3f, r26	; 63
 1dc:	08 95       	ret

000001de <ws2812_setleds>:

void inline ws2812_send(uint8_t *data) {
	ws2812_sendarray_mask(data, 3, _BV(LED_DATA_PIN));
}

void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds) {
 1de:	fc 01       	movw	r30, r24
   ws2812_setleds_pin(ledarray, leds, _BV(LED_DATA_PIN));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask) {
  ws2812_sendarray_mask((uint8_t*)ledarray, leds+leds+leds, pinmask);
 1e0:	9b 01       	movw	r18, r22
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	62 0f       	add	r22, r18
 1e8:	73 1f       	adc	r23, r19

void inline ws2812_sendarray_mask(uint8_t *data, uint16_t datlen, uint8_t maskhi) {
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  WS2812_DDRREG |= maskhi;
 1ea:	87 b1       	in	r24, 0x07	; 7
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	87 b9       	out	0x07, r24	; 7
  
  masklo	=~maskhi&WS2812_PORTREG;
 1f0:	a8 b1       	in	r26, 0x08	; 8
 1f2:	ae 7f       	andi	r26, 0xFE	; 254
  maskhi |=        WS2812_PORTREG;
 1f4:	58 b1       	in	r21, 0x08	; 8
 1f6:	51 60       	ori	r21, 0x01	; 1
  
  sreg_prev=SREG;
 1f8:	bf b7       	in	r27, 0x3f	; 63
#ifdef INTERRUPT_DISABLE
  cli();  
 1fa:	f8 94       	cli
 1fc:	15 c0       	rjmp	.+42     	; 0x228 <loop121+0x20>
#endif  

  while (datlen--) {
    curbyte=*data++;
 1fe:	9f 01       	movw	r18, r30
 200:	2f 5f       	subi	r18, 0xFF	; 255
 202:	3f 4f       	sbci	r19, 0xFF	; 255
 204:	40 81       	ld	r20, Z
    
    asm volatile(
 206:	68 e0       	ldi	r22, 0x08	; 8

00000208 <loop121>:
 208:	58 b9       	out	0x08, r21	; 8
 20a:	00 00       	nop
 20c:	07 f4       	brid	.+0      	; 0x20e <loop121+0x6>
 20e:	47 ff       	sbrs	r20, 7
 210:	a8 b9       	out	0x08, r26	; 8
 212:	44 0f       	add	r20, r20
 214:	00 00       	nop
 216:	07 f4       	brid	.+0      	; 0x218 <loop121+0x10>
 218:	07 f4       	brid	.+0      	; 0x21a <loop121+0x12>
 21a:	07 f4       	brid	.+0      	; 0x21c <loop121+0x14>
 21c:	a8 b9       	out	0x08, r26	; 8
 21e:	07 f4       	brid	.+0      	; 0x220 <loop121+0x18>
 220:	6a 95       	dec	r22
 222:	91 f7       	brne	.-28     	; 0x208 <loop121>
  sreg_prev=SREG;
#ifdef INTERRUPT_DISABLE
  cli();  
#endif  

  while (datlen--) {
 224:	bc 01       	movw	r22, r24
    curbyte=*data++;
 226:	f9 01       	movw	r30, r18
  sreg_prev=SREG;
#ifdef INTERRUPT_DISABLE
  cli();  
#endif  

  while (datlen--) {
 228:	cb 01       	movw	r24, r22
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	67 2b       	or	r22, r23
 22e:	39 f7       	brne	.-50     	; 0x1fe <ws2812_setleds+0x20>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(WS2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 230:	bf bf       	out	0x3f, r27	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	87 ec       	ldi	r24, 0xC7	; 199
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <loop121+0x2e>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <loop121+0x34>
 23c:	00 00       	nop
 23e:	08 95       	ret

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
