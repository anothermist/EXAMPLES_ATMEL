
WS2812B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  00800100  00800100  00000b58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001085  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ef  00000000  00000000  00001cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c7  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00002d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000476  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a1  00000000  00000000  00003302  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000046a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 37       	cpi	r26, 0x78	; 120
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 af 01 	call	0x35e	; 0x35e <main>
  88:	0c 94 70 05 	jmp	0xae0	; 0xae0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <HSVToRGB>:
struct cRGB led[40];

struct RGB { unsigned char R; unsigned char G; unsigned char B; };
struct HSV { double H; double S; double V; };

struct RGB HSVToRGB(struct HSV hsv) {
  90:	2f 92       	push	r2
  92:	3f 92       	push	r3
  94:	4f 92       	push	r4
  96:	5f 92       	push	r5
  98:	6f 92       	push	r6
  9a:	7f 92       	push	r7
  9c:	8f 92       	push	r8
  9e:	9f 92       	push	r9
  a0:	af 92       	push	r10
  a2:	bf 92       	push	r11
  a4:	cf 92       	push	r12
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	62 97       	sbiw	r28, 0x12	; 18
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
  c4:	e9 82       	std	Y+1, r14	; 0x01
  c6:	fa 82       	std	Y+2, r15	; 0x02
  c8:	0b 83       	std	Y+3, r16	; 0x03
  ca:	1c 83       	std	Y+4, r17	; 0x04
  cc:	2d 83       	std	Y+5, r18	; 0x05
  ce:	3e 83       	std	Y+6, r19	; 0x06
  d0:	4f 83       	std	Y+7, r20	; 0x07
  d2:	58 87       	std	Y+8, r21	; 0x08
  d4:	69 87       	std	Y+9, r22	; 0x09
  d6:	7a 87       	std	Y+10, r23	; 0x0a
  d8:	8b 87       	std	Y+11, r24	; 0x0b
  da:	9c 87       	std	Y+12, r25	; 0x0c
	double r = 0, g = 0, b = 0;

	if (hsv.S == 0) {
  dc:	cd 80       	ldd	r12, Y+5	; 0x05
  de:	de 80       	ldd	r13, Y+6	; 0x06
  e0:	ef 80       	ldd	r14, Y+7	; 0x07
  e2:	f8 84       	ldd	r15, Y+8	; 0x08
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	a9 01       	movw	r20, r18
  ea:	c7 01       	movw	r24, r14
  ec:	b6 01       	movw	r22, r12
  ee:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__cmpsf2>
  f2:	81 11       	cpse	r24, r1
  f4:	0d c0       	rjmp	.+26     	; 0x110 <HSVToRGB+0x80>
		r = hsv.V;
  f6:	69 84       	ldd	r6, Y+9	; 0x09
  f8:	7a 84       	ldd	r7, Y+10	; 0x0a
  fa:	5b 84       	ldd	r5, Y+11	; 0x0b
  fc:	4c 84       	ldd	r4, Y+12	; 0x0c
		g = hsv.V;
		b = hsv.V;
  fe:	86 2c       	mov	r8, r6
 100:	97 2c       	mov	r9, r7
 102:	5d 86       	std	Y+13, r5	; 0x0d
 104:	4e 86       	std	Y+14, r4	; 0x0e
struct RGB HSVToRGB(struct HSV hsv) {
	double r = 0, g = 0, b = 0;

	if (hsv.S == 0) {
		r = hsv.V;
		g = hsv.V;
 106:	36 2c       	mov	r3, r6
 108:	27 2c       	mov	r2, r7
 10a:	a5 2c       	mov	r10, r5
 10c:	b4 2c       	mov	r11, r4
 10e:	e5 c0       	rjmp	.+458    	; 0x2da <HSVToRGB+0x24a>
	}
	else {
		int i;
		double f, p, q, t;

		if (hsv.H == 360)
 110:	89 80       	ldd	r8, Y+1	; 0x01
 112:	9a 80       	ldd	r9, Y+2	; 0x02
 114:	ab 80       	ldd	r10, Y+3	; 0x03
 116:	bc 80       	ldd	r11, Y+4	; 0x04
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	44 eb       	ldi	r20, 0xB4	; 180
 11e:	53 e4       	ldi	r21, 0x43	; 67
 120:	c5 01       	movw	r24, r10
 122:	b4 01       	movw	r22, r8
 124:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__cmpsf2>
 128:	81 11       	cpse	r24, r1
 12a:	05 c0       	rjmp	.+10     	; 0x136 <HSVToRGB+0xa6>
		hsv.H = 0;
 12c:	19 82       	std	Y+1, r1	; 0x01
 12e:	1a 82       	std	Y+2, r1	; 0x02
 130:	1b 82       	std	Y+3, r1	; 0x03
 132:	1c 82       	std	Y+4, r1	; 0x04
 134:	0c c0       	rjmp	.+24     	; 0x14e <HSVToRGB+0xbe>
		else
		hsv.H = hsv.H / 60;
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 e7       	ldi	r20, 0x70	; 112
 13c:	52 e4       	ldi	r21, 0x42	; 66
 13e:	c5 01       	movw	r24, r10
 140:	b4 01       	movw	r22, r8
 142:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__divsf3>
 146:	69 83       	std	Y+1, r22	; 0x01
 148:	7a 83       	std	Y+2, r23	; 0x02
 14a:	8b 83       	std	Y+3, r24	; 0x03
 14c:	9c 83       	std	Y+4, r25	; 0x04

		i = (int)trunc(hsv.H);
 14e:	89 80       	ldd	r8, Y+1	; 0x01
 150:	9a 80       	ldd	r9, Y+2	; 0x02
 152:	ab 80       	ldd	r10, Y+3	; 0x03
 154:	bc 80       	ldd	r11, Y+4	; 0x04
 156:	c5 01       	movw	r24, r10
 158:	b4 01       	movw	r22, r8
 15a:	0e 94 24 05 	call	0xa48	; 0xa48 <trunc>
 15e:	0e 94 cf 03 	call	0x79e	; 0x79e <__fixsfsi>
 162:	8b 01       	movw	r16, r22
		f = hsv.H - i;
 164:	07 2e       	mov	r0, r23
 166:	00 0c       	add	r0, r0
 168:	88 0b       	sbc	r24, r24
 16a:	99 0b       	sbc	r25, r25
 16c:	0e 94 07 04 	call	0x80e	; 0x80e <__floatsisf>
 170:	9b 01       	movw	r18, r22
 172:	ac 01       	movw	r20, r24
 174:	c5 01       	movw	r24, r10
 176:	b4 01       	movw	r22, r8
 178:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__subsf3>
 17c:	6f 87       	std	Y+15, r22	; 0x0f
 17e:	78 8b       	std	Y+16, r23	; 0x10
 180:	89 8b       	std	Y+17, r24	; 0x11
 182:	9a 8b       	std	Y+18, r25	; 0x12

		p = hsv.V * (1.0 - hsv.S);
 184:	39 84       	ldd	r3, Y+9	; 0x09
 186:	2a 84       	ldd	r2, Y+10	; 0x0a
 188:	ab 84       	ldd	r10, Y+11	; 0x0b
 18a:	bc 84       	ldd	r11, Y+12	; 0x0c
 18c:	a7 01       	movw	r20, r14
 18e:	96 01       	movw	r18, r12
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	80 e8       	ldi	r24, 0x80	; 128
 196:	9f e3       	ldi	r25, 0x3F	; 63
 198:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__subsf3>
 19c:	9b 01       	movw	r18, r22
 19e:	ac 01       	movw	r20, r24
 1a0:	63 2d       	mov	r22, r3
 1a2:	72 2d       	mov	r23, r2
 1a4:	8a 2d       	mov	r24, r10
 1a6:	9b 2d       	mov	r25, r11
 1a8:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 1ac:	86 2e       	mov	r8, r22
 1ae:	97 2e       	mov	r9, r23
 1b0:	8d 87       	std	Y+13, r24	; 0x0d
 1b2:	9e 87       	std	Y+14, r25	; 0x0e
		q = hsv.V * (1.0 - (hsv.S * f));
 1b4:	2f 85       	ldd	r18, Y+15	; 0x0f
 1b6:	38 89       	ldd	r19, Y+16	; 0x10
 1b8:	49 89       	ldd	r20, Y+17	; 0x11
 1ba:	5a 89       	ldd	r21, Y+18	; 0x12
 1bc:	c7 01       	movw	r24, r14
 1be:	b6 01       	movw	r22, r12
 1c0:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 1c4:	9b 01       	movw	r18, r22
 1c6:	ac 01       	movw	r20, r24
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	9f e3       	ldi	r25, 0x3F	; 63
 1d0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__subsf3>
 1d4:	9b 01       	movw	r18, r22
 1d6:	ac 01       	movw	r20, r24
 1d8:	63 2d       	mov	r22, r3
 1da:	72 2d       	mov	r23, r2
 1dc:	8a 2d       	mov	r24, r10
 1de:	9b 2d       	mov	r25, r11
 1e0:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 1e4:	66 2e       	mov	r6, r22
 1e6:	77 2e       	mov	r7, r23
 1e8:	58 2e       	mov	r5, r24
 1ea:	49 2e       	mov	r4, r25
		t = hsv.V * (1.0 - (hsv.S * (1.0 - f)));
 1ec:	2f 85       	ldd	r18, Y+15	; 0x0f
 1ee:	38 89       	ldd	r19, Y+16	; 0x10
 1f0:	49 89       	ldd	r20, Y+17	; 0x11
 1f2:	5a 89       	ldd	r21, Y+18	; 0x12
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	80 e8       	ldi	r24, 0x80	; 128
 1fa:	9f e3       	ldi	r25, 0x3F	; 63
 1fc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__subsf3>
 200:	9b 01       	movw	r18, r22
 202:	ac 01       	movw	r20, r24
 204:	c7 01       	movw	r24, r14
 206:	b6 01       	movw	r22, r12
 208:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 20c:	9b 01       	movw	r18, r22
 20e:	ac 01       	movw	r20, r24
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	9f e3       	ldi	r25, 0x3F	; 63
 218:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__subsf3>
 21c:	9b 01       	movw	r18, r22
 21e:	ac 01       	movw	r20, r24
 220:	63 2d       	mov	r22, r3
 222:	72 2d       	mov	r23, r2
 224:	8a 2d       	mov	r24, r10
 226:	9b 2d       	mov	r25, r11
 228:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>

		switch (i) {
 22c:	02 30       	cpi	r16, 0x02	; 2
 22e:	11 05       	cpc	r17, r1
 230:	c9 f0       	breq	.+50     	; 0x264 <HSVToRGB+0x1d4>
 232:	44 f4       	brge	.+16     	; 0x244 <HSVToRGB+0x1b4>
 234:	01 15       	cp	r16, r1
 236:	11 05       	cpc	r17, r1
 238:	61 f0       	breq	.+24     	; 0x252 <HSVToRGB+0x1c2>
 23a:	01 30       	cpi	r16, 0x01	; 1
 23c:	11 05       	cpc	r17, r1
 23e:	09 f4       	brne	.+2      	; 0x242 <HSVToRGB+0x1b2>
 240:	4c c0       	rjmp	.+152    	; 0x2da <HSVToRGB+0x24a>
 242:	3b c0       	rjmp	.+118    	; 0x2ba <HSVToRGB+0x22a>
 244:	03 30       	cpi	r16, 0x03	; 3
 246:	11 05       	cpc	r17, r1
 248:	b1 f0       	breq	.+44     	; 0x276 <HSVToRGB+0x1e6>
 24a:	04 30       	cpi	r16, 0x04	; 4
 24c:	11 05       	cpc	r17, r1
 24e:	21 f1       	breq	.+72     	; 0x298 <HSVToRGB+0x208>
 250:	34 c0       	rjmp	.+104    	; 0x2ba <HSVToRGB+0x22a>
			case 0:
			r = hsv.V;
 252:	63 2c       	mov	r6, r3
 254:	72 2c       	mov	r7, r2
 256:	5a 2c       	mov	r5, r10
 258:	4b 2c       	mov	r4, r11
			g = t;
 25a:	36 2e       	mov	r3, r22
 25c:	27 2e       	mov	r2, r23
 25e:	a8 2e       	mov	r10, r24
 260:	b9 2e       	mov	r11, r25
 262:	3b c0       	rjmp	.+118    	; 0x2da <HSVToRGB+0x24a>
			g = hsv.V;
			b = p;
			break;

			case 2:
			r = p;
 264:	68 2c       	mov	r6, r8
 266:	79 2c       	mov	r7, r9
 268:	5d 84       	ldd	r5, Y+13	; 0x0d
 26a:	4e 84       	ldd	r4, Y+14	; 0x0e
			g = hsv.V;
			b = t;
 26c:	86 2e       	mov	r8, r22
 26e:	97 2e       	mov	r9, r23
 270:	8d 87       	std	Y+13, r24	; 0x0d
 272:	9e 87       	std	Y+14, r25	; 0x0e
			break;
 274:	32 c0       	rjmp	.+100    	; 0x2da <HSVToRGB+0x24a>

			case 3:
			r = p;
			g = q;
			b = hsv.V;
			break;
 276:	36 2d       	mov	r19, r6
 278:	27 2d       	mov	r18, r7
 27a:	95 2d       	mov	r25, r5
 27c:	84 2d       	mov	r24, r4
			g = hsv.V;
			b = t;
			break;

			case 3:
			r = p;
 27e:	68 2c       	mov	r6, r8
 280:	79 2c       	mov	r7, r9
 282:	5d 84       	ldd	r5, Y+13	; 0x0d
 284:	4e 84       	ldd	r4, Y+14	; 0x0e
			g = q;
			b = hsv.V;
 286:	83 2c       	mov	r8, r3
 288:	92 2c       	mov	r9, r2
 28a:	ad 86       	std	Y+13, r10	; 0x0d
 28c:	be 86       	std	Y+14, r11	; 0x0e
			b = t;
			break;

			case 3:
			r = p;
			g = q;
 28e:	33 2e       	mov	r3, r19
 290:	22 2e       	mov	r2, r18
 292:	a9 2e       	mov	r10, r25
 294:	b8 2e       	mov	r11, r24
			b = hsv.V;
			break;
 296:	21 c0       	rjmp	.+66     	; 0x2da <HSVToRGB+0x24a>

			case 4:
			r = t;
			g = p;
			b = hsv.V;
			break;
 298:	53 2d       	mov	r21, r3
 29a:	42 2d       	mov	r20, r2
 29c:	3a 2d       	mov	r19, r10
 29e:	2b 2d       	mov	r18, r11
			b = hsv.V;
			break;

			case 4:
			r = t;
			g = p;
 2a0:	38 2c       	mov	r3, r8
 2a2:	29 2c       	mov	r2, r9
 2a4:	ad 84       	ldd	r10, Y+13	; 0x0d
 2a6:	be 84       	ldd	r11, Y+14	; 0x0e
			b = hsv.V;
 2a8:	85 2e       	mov	r8, r21
 2aa:	94 2e       	mov	r9, r20
 2ac:	3d 87       	std	Y+13, r19	; 0x0d
 2ae:	2e 87       	std	Y+14, r18	; 0x0e
			g = q;
			b = hsv.V;
			break;

			case 4:
			r = t;
 2b0:	66 2e       	mov	r6, r22
 2b2:	77 2e       	mov	r7, r23
 2b4:	58 2e       	mov	r5, r24
 2b6:	49 2e       	mov	r4, r25
			g = p;
			b = hsv.V;
			break;
 2b8:	10 c0       	rjmp	.+32     	; 0x2da <HSVToRGB+0x24a>

			default:
			r = hsv.V;
			g = p;
			b = q;
			break;
 2ba:	36 2d       	mov	r19, r6
 2bc:	27 2d       	mov	r18, r7
 2be:	95 2d       	mov	r25, r5
 2c0:	84 2d       	mov	r24, r4
			g = p;
			b = hsv.V;
			break;

			default:
			r = hsv.V;
 2c2:	63 2c       	mov	r6, r3
 2c4:	72 2c       	mov	r7, r2
 2c6:	5a 2c       	mov	r5, r10
 2c8:	4b 2c       	mov	r4, r11
			g = p;
 2ca:	38 2c       	mov	r3, r8
 2cc:	29 2c       	mov	r2, r9
 2ce:	ad 84       	ldd	r10, Y+13	; 0x0d
 2d0:	be 84       	ldd	r11, Y+14	; 0x0e
			b = q;
 2d2:	83 2e       	mov	r8, r19
 2d4:	92 2e       	mov	r9, r18
 2d6:	9d 87       	std	Y+13, r25	; 0x0d
 2d8:	8e 87       	std	Y+14, r24	; 0x0e
		}

	}

	struct RGB rgb;
	rgb.R = r * 255;
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	4f e7       	ldi	r20, 0x7F	; 127
 2e0:	53 e4       	ldi	r21, 0x43	; 67
 2e2:	66 2d       	mov	r22, r6
 2e4:	77 2d       	mov	r23, r7
 2e6:	85 2d       	mov	r24, r5
 2e8:	94 2d       	mov	r25, r4
 2ea:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 2ee:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fixunssfsi>
 2f2:	16 2f       	mov	r17, r22
	rgb.G = g * 255;
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	4f e7       	ldi	r20, 0x7F	; 127
 2fa:	53 e4       	ldi	r21, 0x43	; 67
 2fc:	63 2d       	mov	r22, r3
 2fe:	72 2d       	mov	r23, r2
 300:	8a 2d       	mov	r24, r10
 302:	9b 2d       	mov	r25, r11
 304:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 308:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fixunssfsi>
 30c:	06 2f       	mov	r16, r22
	rgb.B = b * 255;
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	4f e7       	ldi	r20, 0x7F	; 127
 314:	53 e4       	ldi	r21, 0x43	; 67
 316:	68 2d       	mov	r22, r8
 318:	79 2d       	mov	r23, r9
 31a:	8d 85       	ldd	r24, Y+13	; 0x0d
 31c:	9e 85       	ldd	r25, Y+14	; 0x0e
 31e:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 322:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fixunssfsi>
 326:	86 2f       	mov	r24, r22

	return rgb;
}
 328:	61 2f       	mov	r22, r17
 32a:	70 2f       	mov	r23, r16
 32c:	62 96       	adiw	r28, 0x12	; 18
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	df 90       	pop	r13
 346:	cf 90       	pop	r12
 348:	bf 90       	pop	r11
 34a:	af 90       	pop	r10
 34c:	9f 90       	pop	r9
 34e:	8f 90       	pop	r8
 350:	7f 90       	pop	r7
 352:	6f 90       	pop	r6
 354:	5f 90       	pop	r5
 356:	4f 90       	pop	r4
 358:	3f 90       	pop	r3
 35a:	2f 90       	pop	r2
 35c:	08 95       	ret

0000035e <main>:

int main(void) {
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
 366:	2c 97       	sbiw	r28, 0x0c	; 12
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
	
	for (int i = 0; i < 40; i++) {
 372:	c1 2c       	mov	r12, r1
 374:	d1 2c       	mov	r13, r1
 376:	42 c0       	rjmp	.+132    	; 0x3fc <main+0x9e>
		struct HSV data = { i*(360/40), 1, 0.02 };
 378:	b6 01       	movw	r22, r12
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	6c 0d       	add	r22, r12
 388:	7d 1d       	adc	r23, r13
 38a:	07 2e       	mov	r0, r23
 38c:	00 0c       	add	r0, r0
 38e:	88 0b       	sbc	r24, r24
 390:	99 0b       	sbc	r25, r25
 392:	0e 94 07 04 	call	0x80e	; 0x80e <__floatsisf>
 396:	e6 2e       	mov	r14, r22
 398:	46 2f       	mov	r20, r22
 39a:	57 2f       	mov	r21, r23
 39c:	68 2f       	mov	r22, r24
 39e:	79 2f       	mov	r23, r25
 3a0:	49 83       	std	Y+1, r20	; 0x01
 3a2:	5a 83       	std	Y+2, r21	; 0x02
 3a4:	6b 83       	std	Y+3, r22	; 0x03
 3a6:	7c 83       	std	Y+4, r23	; 0x04
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	a0 e8       	ldi	r26, 0x80	; 128
 3ae:	bf e3       	ldi	r27, 0x3F	; 63
 3b0:	8d 83       	std	Y+5, r24	; 0x05
 3b2:	9e 83       	std	Y+6, r25	; 0x06
 3b4:	af 83       	std	Y+7, r26	; 0x07
 3b6:	b8 87       	std	Y+8, r27	; 0x08
 3b8:	8a e0       	ldi	r24, 0x0A	; 10
 3ba:	97 ed       	ldi	r25, 0xD7	; 215
 3bc:	a3 ea       	ldi	r26, 0xA3	; 163
 3be:	bc e3       	ldi	r27, 0x3C	; 60
 3c0:	89 87       	std	Y+9, r24	; 0x09
 3c2:	9a 87       	std	Y+10, r25	; 0x0a
 3c4:	ab 87       	std	Y+11, r26	; 0x0b
 3c6:	bc 87       	std	Y+12, r27	; 0x0c
		struct RGB value = HSVToRGB(data);
 3c8:	fa 80       	ldd	r15, Y+2	; 0x02
 3ca:	0b 81       	ldd	r16, Y+3	; 0x03
 3cc:	1c 81       	ldd	r17, Y+4	; 0x04
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	3e 81       	ldd	r19, Y+6	; 0x06
 3d2:	4f 81       	ldd	r20, Y+7	; 0x07
 3d4:	58 85       	ldd	r21, Y+8	; 0x08
 3d6:	6a e0       	ldi	r22, 0x0A	; 10
 3d8:	7a 85       	ldd	r23, Y+10	; 0x0a
 3da:	8b 85       	ldd	r24, Y+11	; 0x0b
 3dc:	9c 85       	ldd	r25, Y+12	; 0x0c
 3de:	0e 94 48 00 	call	0x90	; 0x90 <HSVToRGB>
		led[i].r=value.R; led[i].g=value.G; led[i].b=value.B;
 3e2:	f6 01       	movw	r30, r12
 3e4:	ee 0f       	add	r30, r30
 3e6:	ff 1f       	adc	r31, r31
 3e8:	ec 0d       	add	r30, r12
 3ea:	fd 1d       	adc	r31, r13
 3ec:	e0 50       	subi	r30, 0x00	; 0
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	61 83       	std	Z+1, r22	; 0x01
 3f2:	70 83       	st	Z, r23
 3f4:	82 83       	std	Z+2, r24	; 0x02
	return rgb;
}

int main(void) {
	
	for (int i = 0; i < 40; i++) {
 3f6:	2f ef       	ldi	r18, 0xFF	; 255
 3f8:	c2 1a       	sub	r12, r18
 3fa:	d2 0a       	sbc	r13, r18
 3fc:	88 e2       	ldi	r24, 0x28	; 40
 3fe:	c8 16       	cp	r12, r24
 400:	d1 04       	cpc	r13, r1
 402:	0c f4       	brge	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	b9 cf       	rjmp	.-142    	; 0x378 <main+0x1a>
		struct HSV data = { i*(360/40), 1, 0.02 };
		struct RGB value = HSVToRGB(data);
		led[i].r=value.R; led[i].g=value.G; led[i].b=value.B;
	}
	ws2812_setleds(led, 40);
 406:	68 e2       	ldi	r22, 0x28	; 40
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 ba 02 	call	0x574	; 0x574 <ws2812_setleds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 412:	9f ef       	ldi	r25, 0xFF	; 255
 414:	27 ea       	ldi	r18, 0xA7	; 167
 416:	81 e6       	ldi	r24, 0x61	; 97
 418:	91 50       	subi	r25, 0x01	; 1
 41a:	20 40       	sbci	r18, 0x00	; 0
 41c:	80 40       	sbci	r24, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 422:	00 00       	nop

	uint8_t pos=0;
	uint8_t direction=1;
	uint8_t i;
	
	for (int i=0; i<40; i++) {
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0c c0       	rjmp	.+24     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
		led[i].r=1; led[i].g=1; led[i].b=1;
 42a:	fc 01       	movw	r30, r24
 42c:	ee 0f       	add	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	e8 0f       	add	r30, r24
 432:	f9 1f       	adc	r31, r25
 434:	e0 50       	subi	r30, 0x00	; 0
 436:	ff 4f       	sbci	r31, 0xFF	; 255
 438:	21 e0       	ldi	r18, 0x01	; 1
 43a:	21 83       	std	Z+1, r18	; 0x01
 43c:	20 83       	st	Z, r18
 43e:	22 83       	std	Z+2, r18	; 0x02

	uint8_t pos=0;
	uint8_t direction=1;
	uint8_t i;
	
	for (int i=0; i<40; i++) {
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	88 32       	cpi	r24, 0x28	; 40
 444:	91 05       	cpc	r25, r1
 446:	8c f3       	brlt	.-30     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		led[i].r=1; led[i].g=1; led[i].b=1;
	}
	ws2812_setleds(led, 40);
 448:	68 e2       	ldi	r22, 0x28	; 40
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	0e 94 ba 02 	call	0x574	; 0x574 <ws2812_setleds>
 454:	9f ef       	ldi	r25, 0xFF	; 255
 456:	29 e6       	ldi	r18, 0x69	; 105
 458:	88 e1       	ldi	r24, 0x18	; 24
 45a:	91 50       	subi	r25, 0x01	; 1
 45c:	20 40       	sbci	r18, 0x00	; 0
 45e:	80 40       	sbci	r24, 0x00	; 0
 460:	e1 f7       	brne	.-8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 464:	00 00       	nop
	_delay_ms(500);
	
	led[0].r=0; led[0].g=0; led[0].b=0;
 466:	e0 e0       	ldi	r30, 0x00	; 0
 468:	f1 e0       	ldi	r31, 0x01	; 1
 46a:	11 82       	std	Z+1, r1	; 0x01
 46c:	10 82       	st	Z, r1
 46e:	12 82       	std	Z+2, r1	; 0x02
	led[1].r=1; led[1].g=0; led[1].b=0;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	84 83       	std	Z+4, r24	; 0x04
 474:	13 82       	std	Z+3, r1	; 0x03
 476:	15 82       	std	Z+5, r1	; 0x05
	led[2].r=0; led[2].g=1; led[2].b=0;
 478:	17 82       	std	Z+7, r1	; 0x07
 47a:	86 83       	std	Z+6, r24	; 0x06
 47c:	10 86       	std	Z+8, r1	; 0x08
	led[3].r=0; led[3].g=0; led[3].b=1;
 47e:	12 86       	std	Z+10, r1	; 0x0a
 480:	11 86       	std	Z+9, r1	; 0x09
 482:	83 87       	std	Z+11, r24	; 0x0b
	
	
	for (i=0; i<40; i++) ws2812_send((uint8_t *)&led[0]);
 484:	10 e0       	ldi	r17, 0x00	; 0
 486:	05 c0       	rjmp	.+10     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 92 02 	call	0x524	; 0x524 <ws2812_send>
 490:	1f 5f       	subi	r17, 0xFF	; 255
 492:	18 32       	cpi	r17, 0x28	; 40
 494:	c8 f3       	brcs	.-14     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 496:	9f ef       	ldi	r25, 0xFF	; 255
 498:	29 e6       	ldi	r18, 0x69	; 105
 49a:	88 e1       	ldi	r24, 0x18	; 24
 49c:	91 50       	subi	r25, 0x01	; 1
 49e:	20 40       	sbci	r18, 0x00	; 0
 4a0:	80 40       	sbci	r24, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a6:	00 00       	nop
	_delay_ms(500);
	for (i=0; i<40; i++) ws2812_send((uint8_t *)&led[2]);
 4a8:	10 e0       	ldi	r17, 0x00	; 0
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4ac:	86 e0       	ldi	r24, 0x06	; 6
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	0e 94 92 02 	call	0x524	; 0x524 <ws2812_send>
 4b4:	1f 5f       	subi	r17, 0xFF	; 255
 4b6:	18 32       	cpi	r17, 0x28	; 40
 4b8:	c8 f3       	brcs	.-14     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4ba:	9f ef       	ldi	r25, 0xFF	; 255
 4bc:	29 e6       	ldi	r18, 0x69	; 105
 4be:	88 e1       	ldi	r24, 0x18	; 24
 4c0:	91 50       	subi	r25, 0x01	; 1
 4c2:	20 40       	sbci	r18, 0x00	; 0
 4c4:	80 40       	sbci	r24, 0x00	; 0
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4ca:	00 00       	nop
	ws2812_setleds(led, 40);
	
	_delay_ms(2000);

	uint8_t pos=0;
	uint8_t direction=1;
 4cc:	ff 24       	eor	r15, r15
 4ce:	f3 94       	inc	r15
	}
	ws2812_setleds(led, 40);
	
	_delay_ms(2000);

	uint8_t pos=0;
 4d0:	00 e0       	ldi	r16, 0x00	; 0
	_delay_ms(500);
	
	
	while(1) {

		for (i=0; i<pos; i++)
 4d2:	10 e0       	ldi	r17, 0x00	; 0
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
		ws2812_send((uint8_t *)&led[1]);
 4d6:	83 e0       	ldi	r24, 0x03	; 3
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 92 02 	call	0x524	; 0x524 <ws2812_send>
	_delay_ms(500);
	
	
	while(1) {

		for (i=0; i<pos; i++)
 4de:	1f 5f       	subi	r17, 0xFF	; 255
 4e0:	10 17       	cp	r17, r16
 4e2:	c8 f3       	brcs	.-14     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4e4:	9f ef       	ldi	r25, 0xFF	; 255
 4e6:	29 e6       	ldi	r18, 0x69	; 105
 4e8:	88 e1       	ldi	r24, 0x18	; 24
 4ea:	91 50       	subi	r25, 0x01	; 1
 4ec:	20 40       	sbci	r18, 0x00	; 0
 4ee:	80 40       	sbci	r24, 0x00	; 0
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4f4:	00 00       	nop
		ws2812_send((uint8_t *)&led[1]);
		
		_delay_ms(500);
		
		for (i=0; i<(40-pos); i++)
 4f6:	10 e0       	ldi	r17, 0x00	; 0
 4f8:	05 c0       	rjmp	.+10     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
		ws2812_send((uint8_t *)&led[3]);
 4fa:	89 e0       	ldi	r24, 0x09	; 9
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 92 02 	call	0x524	; 0x524 <ws2812_send>
		for (i=0; i<pos; i++)
		ws2812_send((uint8_t *)&led[1]);
		
		_delay_ms(500);
		
		for (i=0; i<(40-pos); i++)
 502:	1f 5f       	subi	r17, 0xFF	; 255
 504:	21 2f       	mov	r18, r17
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	88 e2       	ldi	r24, 0x28	; 40
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	80 1b       	sub	r24, r16
 50e:	91 09       	sbc	r25, r1
 510:	28 17       	cp	r18, r24
 512:	39 07       	cpc	r19, r25
 514:	94 f3       	brlt	.-28     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
		ws2812_send((uint8_t *)&led[3]);
		
		pos+=direction;
 516:	0f 0d       	add	r16, r15
		if ((pos==40)||(pos==0)) direction=-direction;
 518:	08 32       	cpi	r16, 0x28	; 40
 51a:	11 f0       	breq	.+4      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 51c:	01 11       	cpse	r16, r1
 51e:	d9 cf       	rjmp	.-78     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 520:	f1 94       	neg	r15
 522:	d7 cf       	rjmp	.-82     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>

00000524 <ws2812_send>:
#include "ws2812.h"
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

void inline ws2812_send(uint8_t *data) {
 524:	fc 01       	movw	r30, r24

void inline ws2812_sendarray_mask(uint8_t *data, uint16_t datlen, uint8_t maskhi) {
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  WS2812_DDRREG |= maskhi;
 526:	87 b1       	in	r24, 0x07	; 7
 528:	81 60       	ori	r24, 0x01	; 1
 52a:	87 b9       	out	0x07, r24	; 7
  
  masklo	=~maskhi&WS2812_PORTREG;
 52c:	78 b1       	in	r23, 0x08	; 8
 52e:	7e 7f       	andi	r23, 0xFE	; 254
  maskhi |=        WS2812_PORTREG;
 530:	68 b1       	in	r22, 0x08	; 8
 532:	61 60       	ori	r22, 0x01	; 1
  
  sreg_prev=SREG;
 534:	af b7       	in	r26, 0x3f	; 63
#ifdef INTERRUPT_DISABLE
  cli();  
 536:	f8 94       	cli
 538:	23 e0       	ldi	r18, 0x03	; 3
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	15 c0       	rjmp	.+42     	; 0x568 <loop39+0x20>
#endif  

  while (datlen--) {
    curbyte=*data++;
 53e:	af 01       	movw	r20, r30
 540:	4f 5f       	subi	r20, 0xFF	; 255
 542:	5f 4f       	sbci	r21, 0xFF	; 255
 544:	20 81       	ld	r18, Z
    
    asm volatile(
 546:	38 e0       	ldi	r19, 0x08	; 8

00000548 <loop39>:
 548:	68 b9       	out	0x08, r22	; 8
 54a:	00 00       	nop
 54c:	07 f4       	brid	.+0      	; 0x54e <loop39+0x6>
 54e:	27 ff       	sbrs	r18, 7
 550:	78 b9       	out	0x08, r23	; 8
 552:	22 0f       	add	r18, r18
 554:	00 00       	nop
 556:	07 f4       	brid	.+0      	; 0x558 <loop39+0x10>
 558:	07 f4       	brid	.+0      	; 0x55a <loop39+0x12>
 55a:	07 f4       	brid	.+0      	; 0x55c <loop39+0x14>
 55c:	78 b9       	out	0x08, r23	; 8
 55e:	07 f4       	brid	.+0      	; 0x560 <loop39+0x18>
 560:	3a 95       	dec	r19
 562:	91 f7       	brne	.-28     	; 0x548 <loop39>
  sreg_prev=SREG;
#ifdef INTERRUPT_DISABLE
  cli();  
#endif  

  while (datlen--) {
 564:	9c 01       	movw	r18, r24
    curbyte=*data++;
 566:	fa 01       	movw	r30, r20
  sreg_prev=SREG;
#ifdef INTERRUPT_DISABLE
  cli();  
#endif  

  while (datlen--) {
 568:	c9 01       	movw	r24, r18
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	23 2b       	or	r18, r19
 56e:	39 f7       	brne	.-50     	; 0x53e <ws2812_send+0x1a>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(WS2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 570:	af bf       	out	0x3f, r26	; 63
 572:	08 95       	ret

00000574 <ws2812_setleds>:

void inline ws2812_send(uint8_t *data) {
	ws2812_sendarray_mask(data, 3, _BV(LED_DATA_PIN));
}

void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds) {
 574:	fc 01       	movw	r30, r24
   ws2812_setleds_pin(ledarray, leds, _BV(LED_DATA_PIN));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask) {
  ws2812_sendarray_mask((uint8_t*)ledarray, leds+leds+leds, pinmask);
 576:	9b 01       	movw	r18, r22
 578:	22 0f       	add	r18, r18
 57a:	33 1f       	adc	r19, r19
 57c:	62 0f       	add	r22, r18
 57e:	73 1f       	adc	r23, r19

void inline ws2812_sendarray_mask(uint8_t *data, uint16_t datlen, uint8_t maskhi) {
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  WS2812_DDRREG |= maskhi;
 580:	87 b1       	in	r24, 0x07	; 7
 582:	81 60       	ori	r24, 0x01	; 1
 584:	87 b9       	out	0x07, r24	; 7
  
  masklo	=~maskhi&WS2812_PORTREG;
 586:	a8 b1       	in	r26, 0x08	; 8
 588:	ae 7f       	andi	r26, 0xFE	; 254
  maskhi |=        WS2812_PORTREG;
 58a:	58 b1       	in	r21, 0x08	; 8
 58c:	51 60       	ori	r21, 0x01	; 1
  
  sreg_prev=SREG;
 58e:	bf b7       	in	r27, 0x3f	; 63
#ifdef INTERRUPT_DISABLE
  cli();  
 590:	f8 94       	cli
 592:	15 c0       	rjmp	.+42     	; 0x5be <loop121+0x20>
#endif  

  while (datlen--) {
    curbyte=*data++;
 594:	9f 01       	movw	r18, r30
 596:	2f 5f       	subi	r18, 0xFF	; 255
 598:	3f 4f       	sbci	r19, 0xFF	; 255
 59a:	40 81       	ld	r20, Z
    
    asm volatile(
 59c:	68 e0       	ldi	r22, 0x08	; 8

0000059e <loop121>:
 59e:	58 b9       	out	0x08, r21	; 8
 5a0:	00 00       	nop
 5a2:	07 f4       	brid	.+0      	; 0x5a4 <loop121+0x6>
 5a4:	47 ff       	sbrs	r20, 7
 5a6:	a8 b9       	out	0x08, r26	; 8
 5a8:	44 0f       	add	r20, r20
 5aa:	00 00       	nop
 5ac:	07 f4       	brid	.+0      	; 0x5ae <loop121+0x10>
 5ae:	07 f4       	brid	.+0      	; 0x5b0 <loop121+0x12>
 5b0:	07 f4       	brid	.+0      	; 0x5b2 <loop121+0x14>
 5b2:	a8 b9       	out	0x08, r26	; 8
 5b4:	07 f4       	brid	.+0      	; 0x5b6 <loop121+0x18>
 5b6:	6a 95       	dec	r22
 5b8:	91 f7       	brne	.-28     	; 0x59e <loop121>
  sreg_prev=SREG;
#ifdef INTERRUPT_DISABLE
  cli();  
#endif  

  while (datlen--) {
 5ba:	bc 01       	movw	r22, r24
    curbyte=*data++;
 5bc:	f9 01       	movw	r30, r18
  sreg_prev=SREG;
#ifdef INTERRUPT_DISABLE
  cli();  
#endif  

  while (datlen--) {
 5be:	cb 01       	movw	r24, r22
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	67 2b       	or	r22, r23
 5c4:	39 f7       	brne	.-50     	; 0x594 <ws2812_setleds+0x20>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(WS2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 5c6:	bf bf       	out	0x3f, r27	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c8:	87 ec       	ldi	r24, 0xC7	; 199
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <loop121+0x2e>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <loop121+0x34>
 5d2:	00 00       	nop
 5d4:	08 95       	ret

000005d6 <__subsf3>:
 5d6:	50 58       	subi	r21, 0x80	; 128

000005d8 <__addsf3>:
 5d8:	bb 27       	eor	r27, r27
 5da:	aa 27       	eor	r26, r26
 5dc:	0e 94 03 03 	call	0x606	; 0x606 <__addsf3x>
 5e0:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_round>
 5e4:	0e 94 6f 04 	call	0x8de	; 0x8de <__fp_pscA>
 5e8:	38 f0       	brcs	.+14     	; 0x5f8 <__addsf3+0x20>
 5ea:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fp_pscB>
 5ee:	20 f0       	brcs	.+8      	; 0x5f8 <__addsf3+0x20>
 5f0:	39 f4       	brne	.+14     	; 0x600 <__addsf3+0x28>
 5f2:	9f 3f       	cpi	r25, 0xFF	; 255
 5f4:	19 f4       	brne	.+6      	; 0x5fc <__addsf3+0x24>
 5f6:	26 f4       	brtc	.+8      	; 0x600 <__addsf3+0x28>
 5f8:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_nan>
 5fc:	0e f4       	brtc	.+2      	; 0x600 <__addsf3+0x28>
 5fe:	e0 95       	com	r30
 600:	e7 fb       	bst	r30, 7
 602:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_inf>

00000606 <__addsf3x>:
 606:	e9 2f       	mov	r30, r25
 608:	0e 94 8e 04 	call	0x91c	; 0x91c <__fp_split3>
 60c:	58 f3       	brcs	.-42     	; 0x5e4 <__addsf3+0xc>
 60e:	ba 17       	cp	r27, r26
 610:	62 07       	cpc	r22, r18
 612:	73 07       	cpc	r23, r19
 614:	84 07       	cpc	r24, r20
 616:	95 07       	cpc	r25, r21
 618:	20 f0       	brcs	.+8      	; 0x622 <__addsf3x+0x1c>
 61a:	79 f4       	brne	.+30     	; 0x63a <__addsf3x+0x34>
 61c:	a6 f5       	brtc	.+104    	; 0x686 <__addsf3x+0x80>
 61e:	0c 94 b0 04 	jmp	0x960	; 0x960 <__fp_zero>
 622:	0e f4       	brtc	.+2      	; 0x626 <__addsf3x+0x20>
 624:	e0 95       	com	r30
 626:	0b 2e       	mov	r0, r27
 628:	ba 2f       	mov	r27, r26
 62a:	a0 2d       	mov	r26, r0
 62c:	0b 01       	movw	r0, r22
 62e:	b9 01       	movw	r22, r18
 630:	90 01       	movw	r18, r0
 632:	0c 01       	movw	r0, r24
 634:	ca 01       	movw	r24, r20
 636:	a0 01       	movw	r20, r0
 638:	11 24       	eor	r1, r1
 63a:	ff 27       	eor	r31, r31
 63c:	59 1b       	sub	r21, r25
 63e:	99 f0       	breq	.+38     	; 0x666 <__addsf3x+0x60>
 640:	59 3f       	cpi	r21, 0xF9	; 249
 642:	50 f4       	brcc	.+20     	; 0x658 <__addsf3x+0x52>
 644:	50 3e       	cpi	r21, 0xE0	; 224
 646:	68 f1       	brcs	.+90     	; 0x6a2 <__addsf3x+0x9c>
 648:	1a 16       	cp	r1, r26
 64a:	f0 40       	sbci	r31, 0x00	; 0
 64c:	a2 2f       	mov	r26, r18
 64e:	23 2f       	mov	r18, r19
 650:	34 2f       	mov	r19, r20
 652:	44 27       	eor	r20, r20
 654:	58 5f       	subi	r21, 0xF8	; 248
 656:	f3 cf       	rjmp	.-26     	; 0x63e <__addsf3x+0x38>
 658:	46 95       	lsr	r20
 65a:	37 95       	ror	r19
 65c:	27 95       	ror	r18
 65e:	a7 95       	ror	r26
 660:	f0 40       	sbci	r31, 0x00	; 0
 662:	53 95       	inc	r21
 664:	c9 f7       	brne	.-14     	; 0x658 <__addsf3x+0x52>
 666:	7e f4       	brtc	.+30     	; 0x686 <__addsf3x+0x80>
 668:	1f 16       	cp	r1, r31
 66a:	ba 0b       	sbc	r27, r26
 66c:	62 0b       	sbc	r22, r18
 66e:	73 0b       	sbc	r23, r19
 670:	84 0b       	sbc	r24, r20
 672:	ba f0       	brmi	.+46     	; 0x6a2 <__addsf3x+0x9c>
 674:	91 50       	subi	r25, 0x01	; 1
 676:	a1 f0       	breq	.+40     	; 0x6a0 <__addsf3x+0x9a>
 678:	ff 0f       	add	r31, r31
 67a:	bb 1f       	adc	r27, r27
 67c:	66 1f       	adc	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	c2 f7       	brpl	.-16     	; 0x674 <__addsf3x+0x6e>
 684:	0e c0       	rjmp	.+28     	; 0x6a2 <__addsf3x+0x9c>
 686:	ba 0f       	add	r27, r26
 688:	62 1f       	adc	r22, r18
 68a:	73 1f       	adc	r23, r19
 68c:	84 1f       	adc	r24, r20
 68e:	48 f4       	brcc	.+18     	; 0x6a2 <__addsf3x+0x9c>
 690:	87 95       	ror	r24
 692:	77 95       	ror	r23
 694:	67 95       	ror	r22
 696:	b7 95       	ror	r27
 698:	f7 95       	ror	r31
 69a:	9e 3f       	cpi	r25, 0xFE	; 254
 69c:	08 f0       	brcs	.+2      	; 0x6a0 <__addsf3x+0x9a>
 69e:	b0 cf       	rjmp	.-160    	; 0x600 <__addsf3+0x28>
 6a0:	93 95       	inc	r25
 6a2:	88 0f       	add	r24, r24
 6a4:	08 f0       	brcs	.+2      	; 0x6a8 <__addsf3x+0xa2>
 6a6:	99 27       	eor	r25, r25
 6a8:	ee 0f       	add	r30, r30
 6aa:	97 95       	ror	r25
 6ac:	87 95       	ror	r24
 6ae:	08 95       	ret

000006b0 <__cmpsf2>:
 6b0:	0e 94 42 04 	call	0x884	; 0x884 <__fp_cmp>
 6b4:	08 f4       	brcc	.+2      	; 0x6b8 <__cmpsf2+0x8>
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	08 95       	ret

000006ba <__divsf3>:
 6ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__divsf3x>
 6be:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_round>
 6c2:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fp_pscB>
 6c6:	58 f0       	brcs	.+22     	; 0x6de <__divsf3+0x24>
 6c8:	0e 94 6f 04 	call	0x8de	; 0x8de <__fp_pscA>
 6cc:	40 f0       	brcs	.+16     	; 0x6de <__divsf3+0x24>
 6ce:	29 f4       	brne	.+10     	; 0x6da <__divsf3+0x20>
 6d0:	5f 3f       	cpi	r21, 0xFF	; 255
 6d2:	29 f0       	breq	.+10     	; 0x6de <__divsf3+0x24>
 6d4:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_inf>
 6d8:	51 11       	cpse	r21, r1
 6da:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_szero>
 6de:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_nan>

000006e2 <__divsf3x>:
 6e2:	0e 94 8e 04 	call	0x91c	; 0x91c <__fp_split3>
 6e6:	68 f3       	brcs	.-38     	; 0x6c2 <__divsf3+0x8>

000006e8 <__divsf3_pse>:
 6e8:	99 23       	and	r25, r25
 6ea:	b1 f3       	breq	.-20     	; 0x6d8 <__divsf3+0x1e>
 6ec:	55 23       	and	r21, r21
 6ee:	91 f3       	breq	.-28     	; 0x6d4 <__divsf3+0x1a>
 6f0:	95 1b       	sub	r25, r21
 6f2:	55 0b       	sbc	r21, r21
 6f4:	bb 27       	eor	r27, r27
 6f6:	aa 27       	eor	r26, r26
 6f8:	62 17       	cp	r22, r18
 6fa:	73 07       	cpc	r23, r19
 6fc:	84 07       	cpc	r24, r20
 6fe:	38 f0       	brcs	.+14     	; 0x70e <__divsf3_pse+0x26>
 700:	9f 5f       	subi	r25, 0xFF	; 255
 702:	5f 4f       	sbci	r21, 0xFF	; 255
 704:	22 0f       	add	r18, r18
 706:	33 1f       	adc	r19, r19
 708:	44 1f       	adc	r20, r20
 70a:	aa 1f       	adc	r26, r26
 70c:	a9 f3       	breq	.-22     	; 0x6f8 <__divsf3_pse+0x10>
 70e:	35 d0       	rcall	.+106    	; 0x77a <__divsf3_pse+0x92>
 710:	0e 2e       	mov	r0, r30
 712:	3a f0       	brmi	.+14     	; 0x722 <__divsf3_pse+0x3a>
 714:	e0 e8       	ldi	r30, 0x80	; 128
 716:	32 d0       	rcall	.+100    	; 0x77c <__divsf3_pse+0x94>
 718:	91 50       	subi	r25, 0x01	; 1
 71a:	50 40       	sbci	r21, 0x00	; 0
 71c:	e6 95       	lsr	r30
 71e:	00 1c       	adc	r0, r0
 720:	ca f7       	brpl	.-14     	; 0x714 <__divsf3_pse+0x2c>
 722:	2b d0       	rcall	.+86     	; 0x77a <__divsf3_pse+0x92>
 724:	fe 2f       	mov	r31, r30
 726:	29 d0       	rcall	.+82     	; 0x77a <__divsf3_pse+0x92>
 728:	66 0f       	add	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	88 1f       	adc	r24, r24
 72e:	bb 1f       	adc	r27, r27
 730:	26 17       	cp	r18, r22
 732:	37 07       	cpc	r19, r23
 734:	48 07       	cpc	r20, r24
 736:	ab 07       	cpc	r26, r27
 738:	b0 e8       	ldi	r27, 0x80	; 128
 73a:	09 f0       	breq	.+2      	; 0x73e <__divsf3_pse+0x56>
 73c:	bb 0b       	sbc	r27, r27
 73e:	80 2d       	mov	r24, r0
 740:	bf 01       	movw	r22, r30
 742:	ff 27       	eor	r31, r31
 744:	93 58       	subi	r25, 0x83	; 131
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	3a f0       	brmi	.+14     	; 0x758 <__divsf3_pse+0x70>
 74a:	9e 3f       	cpi	r25, 0xFE	; 254
 74c:	51 05       	cpc	r21, r1
 74e:	78 f0       	brcs	.+30     	; 0x76e <__divsf3_pse+0x86>
 750:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_inf>
 754:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_szero>
 758:	5f 3f       	cpi	r21, 0xFF	; 255
 75a:	e4 f3       	brlt	.-8      	; 0x754 <__divsf3_pse+0x6c>
 75c:	98 3e       	cpi	r25, 0xE8	; 232
 75e:	d4 f3       	brlt	.-12     	; 0x754 <__divsf3_pse+0x6c>
 760:	86 95       	lsr	r24
 762:	77 95       	ror	r23
 764:	67 95       	ror	r22
 766:	b7 95       	ror	r27
 768:	f7 95       	ror	r31
 76a:	9f 5f       	subi	r25, 0xFF	; 255
 76c:	c9 f7       	brne	.-14     	; 0x760 <__divsf3_pse+0x78>
 76e:	88 0f       	add	r24, r24
 770:	91 1d       	adc	r25, r1
 772:	96 95       	lsr	r25
 774:	87 95       	ror	r24
 776:	97 f9       	bld	r25, 7
 778:	08 95       	ret
 77a:	e1 e0       	ldi	r30, 0x01	; 1
 77c:	66 0f       	add	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	bb 1f       	adc	r27, r27
 784:	62 17       	cp	r22, r18
 786:	73 07       	cpc	r23, r19
 788:	84 07       	cpc	r24, r20
 78a:	ba 07       	cpc	r27, r26
 78c:	20 f0       	brcs	.+8      	; 0x796 <__divsf3_pse+0xae>
 78e:	62 1b       	sub	r22, r18
 790:	73 0b       	sbc	r23, r19
 792:	84 0b       	sbc	r24, r20
 794:	ba 0b       	sbc	r27, r26
 796:	ee 1f       	adc	r30, r30
 798:	88 f7       	brcc	.-30     	; 0x77c <__divsf3_pse+0x94>
 79a:	e0 95       	com	r30
 79c:	08 95       	ret

0000079e <__fixsfsi>:
 79e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fixunssfsi>
 7a2:	68 94       	set
 7a4:	b1 11       	cpse	r27, r1
 7a6:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_szero>
 7aa:	08 95       	ret

000007ac <__fixunssfsi>:
 7ac:	0e 94 96 04 	call	0x92c	; 0x92c <__fp_splitA>
 7b0:	88 f0       	brcs	.+34     	; 0x7d4 <__fixunssfsi+0x28>
 7b2:	9f 57       	subi	r25, 0x7F	; 127
 7b4:	98 f0       	brcs	.+38     	; 0x7dc <__fixunssfsi+0x30>
 7b6:	b9 2f       	mov	r27, r25
 7b8:	99 27       	eor	r25, r25
 7ba:	b7 51       	subi	r27, 0x17	; 23
 7bc:	b0 f0       	brcs	.+44     	; 0x7ea <__fixunssfsi+0x3e>
 7be:	e1 f0       	breq	.+56     	; 0x7f8 <__fixunssfsi+0x4c>
 7c0:	66 0f       	add	r22, r22
 7c2:	77 1f       	adc	r23, r23
 7c4:	88 1f       	adc	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	1a f0       	brmi	.+6      	; 0x7d0 <__fixunssfsi+0x24>
 7ca:	ba 95       	dec	r27
 7cc:	c9 f7       	brne	.-14     	; 0x7c0 <__fixunssfsi+0x14>
 7ce:	14 c0       	rjmp	.+40     	; 0x7f8 <__fixunssfsi+0x4c>
 7d0:	b1 30       	cpi	r27, 0x01	; 1
 7d2:	91 f0       	breq	.+36     	; 0x7f8 <__fixunssfsi+0x4c>
 7d4:	0e 94 b0 04 	call	0x960	; 0x960 <__fp_zero>
 7d8:	b1 e0       	ldi	r27, 0x01	; 1
 7da:	08 95       	ret
 7dc:	0c 94 b0 04 	jmp	0x960	; 0x960 <__fp_zero>
 7e0:	67 2f       	mov	r22, r23
 7e2:	78 2f       	mov	r23, r24
 7e4:	88 27       	eor	r24, r24
 7e6:	b8 5f       	subi	r27, 0xF8	; 248
 7e8:	39 f0       	breq	.+14     	; 0x7f8 <__fixunssfsi+0x4c>
 7ea:	b9 3f       	cpi	r27, 0xF9	; 249
 7ec:	cc f3       	brlt	.-14     	; 0x7e0 <__fixunssfsi+0x34>
 7ee:	86 95       	lsr	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b3 95       	inc	r27
 7f6:	d9 f7       	brne	.-10     	; 0x7ee <__fixunssfsi+0x42>
 7f8:	3e f4       	brtc	.+14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fa:	90 95       	com	r25
 7fc:	80 95       	com	r24
 7fe:	70 95       	com	r23
 800:	61 95       	neg	r22
 802:	7f 4f       	sbci	r23, 0xFF	; 255
 804:	8f 4f       	sbci	r24, 0xFF	; 255
 806:	9f 4f       	sbci	r25, 0xFF	; 255
 808:	08 95       	ret

0000080a <__floatunsisf>:
 80a:	e8 94       	clt
 80c:	09 c0       	rjmp	.+18     	; 0x820 <__floatsisf+0x12>

0000080e <__floatsisf>:
 80e:	97 fb       	bst	r25, 7
 810:	3e f4       	brtc	.+14     	; 0x820 <__floatsisf+0x12>
 812:	90 95       	com	r25
 814:	80 95       	com	r24
 816:	70 95       	com	r23
 818:	61 95       	neg	r22
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	99 23       	and	r25, r25
 822:	a9 f0       	breq	.+42     	; 0x84e <__floatsisf+0x40>
 824:	f9 2f       	mov	r31, r25
 826:	96 e9       	ldi	r25, 0x96	; 150
 828:	bb 27       	eor	r27, r27
 82a:	93 95       	inc	r25
 82c:	f6 95       	lsr	r31
 82e:	87 95       	ror	r24
 830:	77 95       	ror	r23
 832:	67 95       	ror	r22
 834:	b7 95       	ror	r27
 836:	f1 11       	cpse	r31, r1
 838:	f8 cf       	rjmp	.-16     	; 0x82a <__floatsisf+0x1c>
 83a:	fa f4       	brpl	.+62     	; 0x87a <__floatsisf+0x6c>
 83c:	bb 0f       	add	r27, r27
 83e:	11 f4       	brne	.+4      	; 0x844 <__floatsisf+0x36>
 840:	60 ff       	sbrs	r22, 0
 842:	1b c0       	rjmp	.+54     	; 0x87a <__floatsisf+0x6c>
 844:	6f 5f       	subi	r22, 0xFF	; 255
 846:	7f 4f       	sbci	r23, 0xFF	; 255
 848:	8f 4f       	sbci	r24, 0xFF	; 255
 84a:	9f 4f       	sbci	r25, 0xFF	; 255
 84c:	16 c0       	rjmp	.+44     	; 0x87a <__floatsisf+0x6c>
 84e:	88 23       	and	r24, r24
 850:	11 f0       	breq	.+4      	; 0x856 <__floatsisf+0x48>
 852:	96 e9       	ldi	r25, 0x96	; 150
 854:	11 c0       	rjmp	.+34     	; 0x878 <__floatsisf+0x6a>
 856:	77 23       	and	r23, r23
 858:	21 f0       	breq	.+8      	; 0x862 <__floatsisf+0x54>
 85a:	9e e8       	ldi	r25, 0x8E	; 142
 85c:	87 2f       	mov	r24, r23
 85e:	76 2f       	mov	r23, r22
 860:	05 c0       	rjmp	.+10     	; 0x86c <__floatsisf+0x5e>
 862:	66 23       	and	r22, r22
 864:	71 f0       	breq	.+28     	; 0x882 <__floatsisf+0x74>
 866:	96 e8       	ldi	r25, 0x86	; 134
 868:	86 2f       	mov	r24, r22
 86a:	70 e0       	ldi	r23, 0x00	; 0
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	2a f0       	brmi	.+10     	; 0x87a <__floatsisf+0x6c>
 870:	9a 95       	dec	r25
 872:	66 0f       	add	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	da f7       	brpl	.-10     	; 0x870 <__floatsisf+0x62>
 87a:	88 0f       	add	r24, r24
 87c:	96 95       	lsr	r25
 87e:	87 95       	ror	r24
 880:	97 f9       	bld	r25, 7
 882:	08 95       	ret

00000884 <__fp_cmp>:
 884:	99 0f       	add	r25, r25
 886:	00 08       	sbc	r0, r0
 888:	55 0f       	add	r21, r21
 88a:	aa 0b       	sbc	r26, r26
 88c:	e0 e8       	ldi	r30, 0x80	; 128
 88e:	fe ef       	ldi	r31, 0xFE	; 254
 890:	16 16       	cp	r1, r22
 892:	17 06       	cpc	r1, r23
 894:	e8 07       	cpc	r30, r24
 896:	f9 07       	cpc	r31, r25
 898:	c0 f0       	brcs	.+48     	; 0x8ca <__fp_cmp+0x46>
 89a:	12 16       	cp	r1, r18
 89c:	13 06       	cpc	r1, r19
 89e:	e4 07       	cpc	r30, r20
 8a0:	f5 07       	cpc	r31, r21
 8a2:	98 f0       	brcs	.+38     	; 0x8ca <__fp_cmp+0x46>
 8a4:	62 1b       	sub	r22, r18
 8a6:	73 0b       	sbc	r23, r19
 8a8:	84 0b       	sbc	r24, r20
 8aa:	95 0b       	sbc	r25, r21
 8ac:	39 f4       	brne	.+14     	; 0x8bc <__fp_cmp+0x38>
 8ae:	0a 26       	eor	r0, r26
 8b0:	61 f0       	breq	.+24     	; 0x8ca <__fp_cmp+0x46>
 8b2:	23 2b       	or	r18, r19
 8b4:	24 2b       	or	r18, r20
 8b6:	25 2b       	or	r18, r21
 8b8:	21 f4       	brne	.+8      	; 0x8c2 <__fp_cmp+0x3e>
 8ba:	08 95       	ret
 8bc:	0a 26       	eor	r0, r26
 8be:	09 f4       	brne	.+2      	; 0x8c2 <__fp_cmp+0x3e>
 8c0:	a1 40       	sbci	r26, 0x01	; 1
 8c2:	a6 95       	lsr	r26
 8c4:	8f ef       	ldi	r24, 0xFF	; 255
 8c6:	81 1d       	adc	r24, r1
 8c8:	81 1d       	adc	r24, r1
 8ca:	08 95       	ret

000008cc <__fp_inf>:
 8cc:	97 f9       	bld	r25, 7
 8ce:	9f 67       	ori	r25, 0x7F	; 127
 8d0:	80 e8       	ldi	r24, 0x80	; 128
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	08 95       	ret

000008d8 <__fp_nan>:
 8d8:	9f ef       	ldi	r25, 0xFF	; 255
 8da:	80 ec       	ldi	r24, 0xC0	; 192
 8dc:	08 95       	ret

000008de <__fp_pscA>:
 8de:	00 24       	eor	r0, r0
 8e0:	0a 94       	dec	r0
 8e2:	16 16       	cp	r1, r22
 8e4:	17 06       	cpc	r1, r23
 8e6:	18 06       	cpc	r1, r24
 8e8:	09 06       	cpc	r0, r25
 8ea:	08 95       	ret

000008ec <__fp_pscB>:
 8ec:	00 24       	eor	r0, r0
 8ee:	0a 94       	dec	r0
 8f0:	12 16       	cp	r1, r18
 8f2:	13 06       	cpc	r1, r19
 8f4:	14 06       	cpc	r1, r20
 8f6:	05 06       	cpc	r0, r21
 8f8:	08 95       	ret

000008fa <__fp_round>:
 8fa:	09 2e       	mov	r0, r25
 8fc:	03 94       	inc	r0
 8fe:	00 0c       	add	r0, r0
 900:	11 f4       	brne	.+4      	; 0x906 <__stack+0x7>
 902:	88 23       	and	r24, r24
 904:	52 f0       	brmi	.+20     	; 0x91a <__stack+0x1b>
 906:	bb 0f       	add	r27, r27
 908:	40 f4       	brcc	.+16     	; 0x91a <__stack+0x1b>
 90a:	bf 2b       	or	r27, r31
 90c:	11 f4       	brne	.+4      	; 0x912 <__stack+0x13>
 90e:	60 ff       	sbrs	r22, 0
 910:	04 c0       	rjmp	.+8      	; 0x91a <__stack+0x1b>
 912:	6f 5f       	subi	r22, 0xFF	; 255
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	8f 4f       	sbci	r24, 0xFF	; 255
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	08 95       	ret

0000091c <__fp_split3>:
 91c:	57 fd       	sbrc	r21, 7
 91e:	90 58       	subi	r25, 0x80	; 128
 920:	44 0f       	add	r20, r20
 922:	55 1f       	adc	r21, r21
 924:	59 f0       	breq	.+22     	; 0x93c <__fp_splitA+0x10>
 926:	5f 3f       	cpi	r21, 0xFF	; 255
 928:	71 f0       	breq	.+28     	; 0x946 <__fp_splitA+0x1a>
 92a:	47 95       	ror	r20

0000092c <__fp_splitA>:
 92c:	88 0f       	add	r24, r24
 92e:	97 fb       	bst	r25, 7
 930:	99 1f       	adc	r25, r25
 932:	61 f0       	breq	.+24     	; 0x94c <__fp_splitA+0x20>
 934:	9f 3f       	cpi	r25, 0xFF	; 255
 936:	79 f0       	breq	.+30     	; 0x956 <__fp_splitA+0x2a>
 938:	87 95       	ror	r24
 93a:	08 95       	ret
 93c:	12 16       	cp	r1, r18
 93e:	13 06       	cpc	r1, r19
 940:	14 06       	cpc	r1, r20
 942:	55 1f       	adc	r21, r21
 944:	f2 cf       	rjmp	.-28     	; 0x92a <__fp_split3+0xe>
 946:	46 95       	lsr	r20
 948:	f1 df       	rcall	.-30     	; 0x92c <__fp_splitA>
 94a:	08 c0       	rjmp	.+16     	; 0x95c <__fp_splitA+0x30>
 94c:	16 16       	cp	r1, r22
 94e:	17 06       	cpc	r1, r23
 950:	18 06       	cpc	r1, r24
 952:	99 1f       	adc	r25, r25
 954:	f1 cf       	rjmp	.-30     	; 0x938 <__fp_splitA+0xc>
 956:	86 95       	lsr	r24
 958:	71 05       	cpc	r23, r1
 95a:	61 05       	cpc	r22, r1
 95c:	08 94       	sec
 95e:	08 95       	ret

00000960 <__fp_zero>:
 960:	e8 94       	clt

00000962 <__fp_szero>:
 962:	bb 27       	eor	r27, r27
 964:	66 27       	eor	r22, r22
 966:	77 27       	eor	r23, r23
 968:	cb 01       	movw	r24, r22
 96a:	97 f9       	bld	r25, 7
 96c:	08 95       	ret

0000096e <__mulsf3>:
 96e:	0e 94 ca 04 	call	0x994	; 0x994 <__mulsf3x>
 972:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_round>
 976:	0e 94 6f 04 	call	0x8de	; 0x8de <__fp_pscA>
 97a:	38 f0       	brcs	.+14     	; 0x98a <__mulsf3+0x1c>
 97c:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fp_pscB>
 980:	20 f0       	brcs	.+8      	; 0x98a <__mulsf3+0x1c>
 982:	95 23       	and	r25, r21
 984:	11 f0       	breq	.+4      	; 0x98a <__mulsf3+0x1c>
 986:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_inf>
 98a:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_nan>
 98e:	11 24       	eor	r1, r1
 990:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_szero>

00000994 <__mulsf3x>:
 994:	0e 94 8e 04 	call	0x91c	; 0x91c <__fp_split3>
 998:	70 f3       	brcs	.-36     	; 0x976 <__mulsf3+0x8>

0000099a <__mulsf3_pse>:
 99a:	95 9f       	mul	r25, r21
 99c:	c1 f3       	breq	.-16     	; 0x98e <__mulsf3+0x20>
 99e:	95 0f       	add	r25, r21
 9a0:	50 e0       	ldi	r21, 0x00	; 0
 9a2:	55 1f       	adc	r21, r21
 9a4:	62 9f       	mul	r22, r18
 9a6:	f0 01       	movw	r30, r0
 9a8:	72 9f       	mul	r23, r18
 9aa:	bb 27       	eor	r27, r27
 9ac:	f0 0d       	add	r31, r0
 9ae:	b1 1d       	adc	r27, r1
 9b0:	63 9f       	mul	r22, r19
 9b2:	aa 27       	eor	r26, r26
 9b4:	f0 0d       	add	r31, r0
 9b6:	b1 1d       	adc	r27, r1
 9b8:	aa 1f       	adc	r26, r26
 9ba:	64 9f       	mul	r22, r20
 9bc:	66 27       	eor	r22, r22
 9be:	b0 0d       	add	r27, r0
 9c0:	a1 1d       	adc	r26, r1
 9c2:	66 1f       	adc	r22, r22
 9c4:	82 9f       	mul	r24, r18
 9c6:	22 27       	eor	r18, r18
 9c8:	b0 0d       	add	r27, r0
 9ca:	a1 1d       	adc	r26, r1
 9cc:	62 1f       	adc	r22, r18
 9ce:	73 9f       	mul	r23, r19
 9d0:	b0 0d       	add	r27, r0
 9d2:	a1 1d       	adc	r26, r1
 9d4:	62 1f       	adc	r22, r18
 9d6:	83 9f       	mul	r24, r19
 9d8:	a0 0d       	add	r26, r0
 9da:	61 1d       	adc	r22, r1
 9dc:	22 1f       	adc	r18, r18
 9de:	74 9f       	mul	r23, r20
 9e0:	33 27       	eor	r19, r19
 9e2:	a0 0d       	add	r26, r0
 9e4:	61 1d       	adc	r22, r1
 9e6:	23 1f       	adc	r18, r19
 9e8:	84 9f       	mul	r24, r20
 9ea:	60 0d       	add	r22, r0
 9ec:	21 1d       	adc	r18, r1
 9ee:	82 2f       	mov	r24, r18
 9f0:	76 2f       	mov	r23, r22
 9f2:	6a 2f       	mov	r22, r26
 9f4:	11 24       	eor	r1, r1
 9f6:	9f 57       	subi	r25, 0x7F	; 127
 9f8:	50 40       	sbci	r21, 0x00	; 0
 9fa:	9a f0       	brmi	.+38     	; 0xa22 <__mulsf3_pse+0x88>
 9fc:	f1 f0       	breq	.+60     	; 0xa3a <__mulsf3_pse+0xa0>
 9fe:	88 23       	and	r24, r24
 a00:	4a f0       	brmi	.+18     	; 0xa14 <__mulsf3_pse+0x7a>
 a02:	ee 0f       	add	r30, r30
 a04:	ff 1f       	adc	r31, r31
 a06:	bb 1f       	adc	r27, r27
 a08:	66 1f       	adc	r22, r22
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 1f       	adc	r24, r24
 a0e:	91 50       	subi	r25, 0x01	; 1
 a10:	50 40       	sbci	r21, 0x00	; 0
 a12:	a9 f7       	brne	.-22     	; 0x9fe <__mulsf3_pse+0x64>
 a14:	9e 3f       	cpi	r25, 0xFE	; 254
 a16:	51 05       	cpc	r21, r1
 a18:	80 f0       	brcs	.+32     	; 0xa3a <__mulsf3_pse+0xa0>
 a1a:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_inf>
 a1e:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_szero>
 a22:	5f 3f       	cpi	r21, 0xFF	; 255
 a24:	e4 f3       	brlt	.-8      	; 0xa1e <__mulsf3_pse+0x84>
 a26:	98 3e       	cpi	r25, 0xE8	; 232
 a28:	d4 f3       	brlt	.-12     	; 0xa1e <__mulsf3_pse+0x84>
 a2a:	86 95       	lsr	r24
 a2c:	77 95       	ror	r23
 a2e:	67 95       	ror	r22
 a30:	b7 95       	ror	r27
 a32:	f7 95       	ror	r31
 a34:	e7 95       	ror	r30
 a36:	9f 5f       	subi	r25, 0xFF	; 255
 a38:	c1 f7       	brne	.-16     	; 0xa2a <__mulsf3_pse+0x90>
 a3a:	fe 2b       	or	r31, r30
 a3c:	88 0f       	add	r24, r24
 a3e:	91 1d       	adc	r25, r1
 a40:	96 95       	lsr	r25
 a42:	87 95       	ror	r24
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <trunc>:
 a48:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_trunc>
 a4c:	30 f0       	brcs	.+12     	; 0xa5a <trunc+0x12>
 a4e:	9f 37       	cpi	r25, 0x7F	; 127
 a50:	10 f4       	brcc	.+4      	; 0xa56 <trunc+0xe>
 a52:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_szero>
 a56:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__fp_mintl>
 a5a:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_mpack>

00000a5e <__fp_mintl>:
 a5e:	88 23       	and	r24, r24
 a60:	71 f4       	brne	.+28     	; 0xa7e <__fp_mintl+0x20>
 a62:	77 23       	and	r23, r23
 a64:	21 f0       	breq	.+8      	; 0xa6e <__fp_mintl+0x10>
 a66:	98 50       	subi	r25, 0x08	; 8
 a68:	87 2b       	or	r24, r23
 a6a:	76 2f       	mov	r23, r22
 a6c:	07 c0       	rjmp	.+14     	; 0xa7c <__fp_mintl+0x1e>
 a6e:	66 23       	and	r22, r22
 a70:	11 f4       	brne	.+4      	; 0xa76 <__fp_mintl+0x18>
 a72:	99 27       	eor	r25, r25
 a74:	0d c0       	rjmp	.+26     	; 0xa90 <__fp_mintl+0x32>
 a76:	90 51       	subi	r25, 0x10	; 16
 a78:	86 2b       	or	r24, r22
 a7a:	70 e0       	ldi	r23, 0x00	; 0
 a7c:	60 e0       	ldi	r22, 0x00	; 0
 a7e:	2a f0       	brmi	.+10     	; 0xa8a <__fp_mintl+0x2c>
 a80:	9a 95       	dec	r25
 a82:	66 0f       	add	r22, r22
 a84:	77 1f       	adc	r23, r23
 a86:	88 1f       	adc	r24, r24
 a88:	da f7       	brpl	.-10     	; 0xa80 <__fp_mintl+0x22>
 a8a:	88 0f       	add	r24, r24
 a8c:	96 95       	lsr	r25
 a8e:	87 95       	ror	r24
 a90:	97 f9       	bld	r25, 7
 a92:	08 95       	ret

00000a94 <__fp_mpack>:
 a94:	9f 3f       	cpi	r25, 0xFF	; 255
 a96:	31 f0       	breq	.+12     	; 0xaa4 <__fp_mpack_finite+0xc>

00000a98 <__fp_mpack_finite>:
 a98:	91 50       	subi	r25, 0x01	; 1
 a9a:	20 f4       	brcc	.+8      	; 0xaa4 <__fp_mpack_finite+0xc>
 a9c:	87 95       	ror	r24
 a9e:	77 95       	ror	r23
 aa0:	67 95       	ror	r22
 aa2:	b7 95       	ror	r27
 aa4:	88 0f       	add	r24, r24
 aa6:	91 1d       	adc	r25, r1
 aa8:	96 95       	lsr	r25
 aaa:	87 95       	ror	r24
 aac:	97 f9       	bld	r25, 7
 aae:	08 95       	ret

00000ab0 <__fp_trunc>:
 ab0:	0e 94 96 04 	call	0x92c	; 0x92c <__fp_splitA>
 ab4:	a0 f0       	brcs	.+40     	; 0xade <__fp_trunc+0x2e>
 ab6:	be e7       	ldi	r27, 0x7E	; 126
 ab8:	b9 17       	cp	r27, r25
 aba:	88 f4       	brcc	.+34     	; 0xade <__fp_trunc+0x2e>
 abc:	bb 27       	eor	r27, r27
 abe:	9f 38       	cpi	r25, 0x8F	; 143
 ac0:	60 f4       	brcc	.+24     	; 0xada <__fp_trunc+0x2a>
 ac2:	16 16       	cp	r1, r22
 ac4:	b1 1d       	adc	r27, r1
 ac6:	67 2f       	mov	r22, r23
 ac8:	78 2f       	mov	r23, r24
 aca:	88 27       	eor	r24, r24
 acc:	98 5f       	subi	r25, 0xF8	; 248
 ace:	f7 cf       	rjmp	.-18     	; 0xabe <__fp_trunc+0xe>
 ad0:	86 95       	lsr	r24
 ad2:	77 95       	ror	r23
 ad4:	67 95       	ror	r22
 ad6:	b1 1d       	adc	r27, r1
 ad8:	93 95       	inc	r25
 ada:	96 39       	cpi	r25, 0x96	; 150
 adc:	c8 f3       	brcs	.-14     	; 0xad0 <__fp_trunc+0x20>
 ade:	08 95       	ret

00000ae0 <_exit>:
 ae0:	f8 94       	cli

00000ae2 <__stop_program>:
 ae2:	ff cf       	rjmp	.-2      	; 0xae2 <__stop_program>
